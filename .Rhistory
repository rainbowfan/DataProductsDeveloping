sum(sort(table(tmp3[!duplicated(tmp3),"FIRST_DEGREE_MAJOR_1"]), decreasing = TRUE))
887+1369
length(sort(table(tmp3[!duplicated(tmp3),"FIRST_DEGREE_MAJOR_1"]), decreasing = TRUE) != 0)
sort(table(tmp3[!duplicated(tmp3),"FIRST_DEGREE_MAJOR_1"]), decreasing = TRUE) != 0
sum(sort(table(tmp3[!duplicated(tmp3),"FIRST_DEGREE_MAJOR_1"]), decreasing = TRUE) != 0)
tmp4 = ans_dat_updated[is.na(ans_dat_updated$FIRST_DEGREE_MAJOR_1), c("PIDM","FIRST_MAJOR_MAJOR_1")]
tmp4 = ans_dat_updated[is.na(ans_dat_updated$FIRST_DEGREE_MAJOR_1), c("PIDM","FIRST_TERM_MAJOR_1")]
length(sort(table(tmp4[!duplicated(tmp4),"FIRST_TERM_MAJOR_1"]), decreasing = TRUE) != 0)
sort(table(tmp4[!duplicated(tmp4),"FIRST_TERM_MAJOR_1"]), decreasing = TRUE)
retain_var = c("PIDM", "TERM", "GRADE", "GRADE_PT", "SUBJCRSE", "ADMIT_TERM","ADMIT_LEVEL.x", "IS_URM", "ETHN_DESC", "CHE2A_QUAL", "GENDER", "LOWINCOME", "FIRST_TERM_MAJOR_1",
"FIRST_TERM_MAJOR_2", "FIRST_TERM_MAJOR_3","FIRST_DEGREE_MAJOR_1", "FIRST_DEGREE_MAJOR_2", "FIRST_DEGREE_MAJOR_3")
dat_red = dat_red_0[dat_red_0$PIDM %in%pidm, retain_var] #21501 10 reduces to 17659 10
dat_red = droplevels(dat_red)
dat_red = dat_red[order(dat_red$TERM,decreasing = TRUE), ]
dat_red = dat_red[order(dat_red$SUBJCRSE,decreasing = TRUE), ]
dat_red = dat_red[order(dat_red$PIDM,decreasing = TRUE), ]
dat_red = dat_red[!duplicated(dat_red[,c(1,5)]),] #check duplicates by "PIDM" and "SUBJCRSE"
tapply(dat_red$PIDM, dat_red$PIDM, length)
dat_ans2 = unique(dat_red[dat_red$SUBJCRSE=="ANS 002", c("PIDM", "TERM", "GRADE", "GRADE_PT")])
dat_red = merge(dat_red, dat_ans2, by = "PIDM") #
dat_red$course_com = ifelse(dat_red$TERM.x>dat_red$TERM.y, "After", ifelse(dat_red$TERM.x<dat_red$TERM.y, "Before", "During"))
dat_red_tmp = dat_red
length(unique(dat_red_tmp$SUBJCRSE)) #2050 unique courses
checklist = union(checklist_Ans2, checklist_10)
dat_red_tmp_10 = dat_red_tmp[dat_red_tmp$SUBJCRSE %in% checklist_10, ]
table(dat_red_tmp_10$SUBJCRSE, dat_red_tmp_10$course_com)
names(dat_red)[c(1,5ï¼‰]
names(dat_red)[c(1,5)]
rowSums(table(dat_red_tmp_10$SUBJCRSE, dat_red_tmp_10$course_com))
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE %in% c("CHE 002A", "ANS 002"), ]
length(unique(dat_red_tmp_che2a$PIDM))
names(dat_red_tmp_che2a)
?cor
names(dat_red_tmp_che2a)
table(dat_red_tmp_che2a$GRADE.x, dat_red_tmp_che2a$GRADE.y) #What matt suggested
table(dat_red_tmp$SUBJCRSE)
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE =="CHE 002A", ]
length(unique(dat_red_tmp_che2a$PIDM))
names(dat_red_tmp_che2a)
table(dat_red_tmp_che2a$GRADE.x, dat_red_tmp_che2a$GRADE.y) #What matt suggested
dat_red_tmp$GRADE.x_comb
dat_red_tmp$GRADE.x_comb = substr(dat_red_tmp$GRADE.x, 1, 1)
dat_red_tmp$GRADE.y_comb = substr(dat_red_tmp$GRADE.y, 1, 1)
dat_red_tmp$GRADE.x_comb
dat_red_tmp$GRADE.x_comb = substr(dat_red_tmp$GRADE.x, 1, 1)
dat_red_tmp$GRADE.y_comb = substr(dat_red_tmp$GRADE.y, 1, 1)
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002A", ]
table(dat_red_tmp_che2a$GRADE.x_comb, dat_red_tmp_che2a$GRADE.y_comb)
cor(dat_red_tmp_che2a$GRADE.x_comb, dat_red_tmp_che2a$GRADE.y_comb)
names(dat_red_tmp_che2a)
cor(dat_red_tmp_che2a$GRADE_PT.x, dat_red_tmp_che2a$GRADE_PT.y)
lm_che2a = lm(GRADE_PT.y ~ GRADE_PT.x, data = dat_red_tmp_che2a)
summary(lm_che2a) #R squared 0.3201 p-value <2.2e-16 +
chisq.test(tbl_che2a) #reject independence #inappropriate
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002A", ]
cor(dat_red_tmp_che2a$GRADE_PT.x, dat_red_tmp_che2a$GRADE_PT.y)
dat_red_tmp_che2b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002B", ]
table(dat_red_tmp_che2b$GRADE.x_comb, dat_red_tmp_che2b$GRADE.y_comb)
cor(dat_red_tmp_che2b$GRADE.x_comb, dat_red_tmp_che2b$GRADE.y_comb)
cor(dat_red_tmp_che2b$GRADE_PT.x, dat_red_tmp_che2b$GRADE_PT.y)
dat_red_tmp_che8a = dat_red_tmp[dat_red_tmp$SUBJCRSE == "CHE 008A", ]
cor(dat_red_tmp_che8a$GRADE_PT.x, dat_red_tmp_che8a$GRADE_PT.y)
dat_red_tmp_che8b = dat_red_tmp[dat_red_tmp$SUBJCRSE =="CHE 008B", ]
cor(dat_red_tmp_che8b$GRADE_PT.x, dat_red_tmp_che8b$GRADE_PT.y)
dat_red_tmp_bis2a = dat_red_tmp[dat_red_tmp$SUBJCRSE == "BIS 002A", ]
cor(dat_red_tmp_bis2a$GRADE_PT.x, dat_red_tmp_bis2a$GRADE_PT.y)
dat_red_tmp_bis2b = dat_red_tmp[dat_red_tmp$SUBJCRSE == "BIS 002B", ]
cor(dat_red_tmp_che2b$GRADE_PT.x, dat_red_tmp_che2b$GRADE_PT.y)
dat_red_tmp_abi102 = dat_red_tmp[dat_red_tmp$SUBJCRSE =="ABI 102",  ]
cor(dat_red_tmp_abi102$GRADE_PT.x, dat_red_tmp_abi102$GRADE_PT.y)
dat_red_tmp_ang107 = dat_red_tmp[dat_red_tmp$SUBJCRSE =="ANG 107", ]
cor(dat_red_tmp_ang107$GRADE_PT.x, dat_red_tmp_ang107$GRADE_PT.y)
dat_red_tmp_ans124 = dat_red_tmp[dat_red_tmp$SUBJCRSE == "ANS 124", ]
cor(dat_red_tmp_ans124$GRADE_PT.x, dat_red_tmp_ans124$GRADE_PT.y)
dat_red_tmp_npb121 = dat_red_tmp[dat_red_tmp$SUBJCRSE == "NPB 121", ]
cor(dat_red_tmp_npb121$GRADE_PT.x, dat_red_tmp_npb121$GRADE_PT.y)
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002A", ]
lm_che2a = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che2a)
summary(lm_che2a) #R squared 0.3201 p-value <2.2e-16 +
lm_che2b = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che2b)
dat_red_tmp_che2b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002B", ]
lm_che2b = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che2b)
summary(lm_che2b) #R squared 0.3114 p-value <2.2e-16 +
dat_red_tmp_che8b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 008A", ]
dat_red_tmp_che8b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 008A", ]
lm_che8a = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che8a)
summary(lm_che8a) #R squared 0.7131 p-value <2.2e-16 +
table(dat_red_tmp_10$SUBJCRSE, dat_red_tmp_10$course_com)
names(dat_red_tmp)
table(dat_red_tmp$course_com)
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002A" & dat_red_tmp_10$course_com == "After", ]
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002A" & dat_red_tmp$course_com == "After", ]
dat_red_tmp_che2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002A" & dat_red_tmp$course_com == "After", ]
lm_che2a = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che2a)
summary(lm_che2a) #R squared 0.3201 p-value <2.2e-16 +
dat_red_tmp_che2b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 002B" & dat_red_tmp$course_com == "After", ]
lm_che2b = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che2b)
summary(lm_che2b) #R squared 0.3114 p-value <2.2e-16 +
dat_red_tmp_che8b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 008A" & dat_red_tmp$course_com == "After", ]
lm_che8a = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che8a)
summary(lm_che8a) #R squared 0.7131 p-value <2.2e-16 +
dat_red_tmp_che8b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="CHE 008B" & dat_red_tmp$course_com == "After", ]
lm_che8b = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_che8b)
summary(lm_che8b) #R squared 0.2351 p-value <2.2e-16 +
dat_red_tmp_bis2a = dat_red_tmp[dat_red_tmp$SUBJCRSE=="BIS 002A" & dat_red_tmp$course_com == "After", ]
lm_bis2a = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_bis2a)
summary(lm_bis2a) #R squared 0.3977 p-value <2.2e-16 +
dat_red_tmp_bis2b = dat_red_tmp[dat_red_tmp$SUBJCRSE=="BIS 002B" & dat_red_tmp$course_com == "After", ]
lm_bis2b = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_bis2b)
summary(lm_bis2b) #R squared 0.3514 p-value <2.2e-16 +
dat_red_tmp_abi102 = dat_red_tmp[dat_red_tmp$SUBJCRSE=="ABI 102" & dat_red_tmp$course_com == "After", ]
lm_abi102 = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_abi102)
summary(lm_abi102) #R squared 0.2991 p-value <2.2e-16 +
dat_red_tmp_ang107 = dat_red_tmp[dat_red_tmp$SUBJCRSE=="ANG 107" & dat_red_tmp$course_com == "After", ]
lm_ang107 = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_ang107)
summary(lm_ang107) #R squared 0.2805 p-value <2.2e-16 +
dat_red_tmp_ans124 = dat_red_tmp[dat_red_tmp$SUBJCRSE=="ANS 124" & dat_red_tmp$course_com == "After", ]
lm_ans124 = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_ans124)
summary(lm_ans124) #R squared 0.2547 p-value <2.2e-16 +
dat_red_tmp_npb121 = dat_red_tmp[dat_red_tmp$SUBJCRSE=="NPB 121" & dat_red_tmp$course_com == "After",]
lm_npb121 = lm(GRADE_PT.x ~ GRADE_PT.y, data = dat_red_tmp_npb121)
summary(lm_npb121) #R squared 0.2477 p-value <2.2e-16 +
names(dat_red_tmp_che2a)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_che2a)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_che2b)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_che8a)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_che8b)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_bis2a)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_bis2b)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_abi102)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_ang107)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_ans124)
write.csv(file="/Users/hongfan/Downloads/honors_che2a.csv", x=dat_red_tmp_npb121)
library(shiny)
library(miniUI)
install.packages("miniUI")
library(miniUI)
myFirstGadget <-function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session){
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
myFirstGadget()
myFirstGadget()
myFirstGadget()
multiplyNumbers <- function(numbers1, numbers2){
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices = numbers1),
selectInput("num2", "Second Number", choices = numbers2)
)
)
server <- function(input, output, session){
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1*num2)
})
}
runGadget(ui, server)
}
multiplyNumbers(1:10, 1:10)
multiplyNumbers(1:10, 1:10)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
pickTrees()
names(tree)
names(trees)
pickTrees()
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot",  brush = "brush")
)
)
server <- function(input, output, session){
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
pickTrees()
Fruits
install.packages("googleVis")
library(googleVis)
suppressPackageStartupMessage(library(googleVis))
suppressPackageStartupMessages(library(googleVis))
Fruits
options = list(width = 600, height = 400))
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
print(M, "chart")
plot(M)
M <- gvisMotionChart(Fruits, "Fruit", "Year",
options = list(width = 600, height = 400))
plot(M)
plot(M)
Fruits
?gvisMotionChart
print(M, file = "test.html")
print(M, file = "test.html")
Exports
G <- gvisGeoChart(Exports, locationvar = "Country",
colorvar = "Profit", options = list(width = 600, height = 400))
plot(G)
df <- data.frame(label = c("US", "GB", "BR"), val1 = c(1,3,4), vals = c(23,12,32))
Line <- gvisLineChart(df, xvar = "label", yvar = c("val1", "val2"),
options = list(title = "Hello World", legend = "bottom",
titleTextStyle = "{color:'red', fontSize:18}",
vAxis = "{gridlines:{color:'red', count:3}}",
hAxis = "{title: 'My Label', titleTextStyle:{color:'blue'}}",
series = "[{color:'green', targetAxisIndex: 0},
{color:'blue', targetAxisIndex:1}]",
vAxes = "[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)"}]",
curveType = "function", width = 500, height = 300
))
Line <- gvisLineChart(df, xvar = "label", yvar = c("val1", "val2"),
options = list(title = "Hello World", legend = "bottom",
titleTextStyle = "{color:'red', fontSize:18}",
vAxis = "{gridlines:{color:'red', count:3}}",
hAxis = "{title: 'My Label', titleTextStyle:{color:'blue'}}",
series = "[{color:'green', targetAxisIndex: 0},
{color:'blue', targetAxisIndex:1}]",
vAxes = "[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType = "function", width = 500, height = 300
))
df <- data.frame(label = c("US", "GB", "BR"), val1 = c(1,3,4), val2 = c(23,12,32))
Line <- gvisLineChart(df, xvar = "label", yvar = c("val1", "val2"),
options = list(title = "Hello World", legend = "bottom",
titleTextStyle = "{color:'red', fontSize:18}",
vAxis = "{gridlines:{color:'red', count:3}}",
hAxis = "{title: 'My Label', titleTextStyle:{color:'blue'}}",
series = "[{color:'green', targetAxisIndex: 0},
{color:'blue', targetAxisIndex:1}]",
vAxes = "[{title:'Value 1 (%)', format:'##,######%'},
{title:'Value 2 (\U00A3)'}]",
curveType = "function", width = 500, height = 300
))
plot(Line)
T1 <- gvisTable(Exports, options = list(width=200, height=270))
plot(T1)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
Fruits
GT <- gvisMerge(G, T1, horizontal = FALSE)
plot(GT)
GTM <- gvisMerge(GT, M, horizontal = TRUE, tableOptions = "bgcolor=\"#CCCCCC\" cellspacing=10")
plot(GTM)
plot(GTM, "chart")
plot(GTM)
install.packages("plotly")
library(plotly)
library(plotly)
install.packages("plotly")
library(plotly)
install.packages("plotly")
library("plotly")
install.packages("plotly")
library("plotly")
library(plotly)
library(plotly)
library(plotly)
library(shiny)
library(datasets)
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
?iris
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
summary(iris)
?textInput
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
summary(iris)
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
?knn
install.packages("class")
library(class)
head(iris)
runApp('Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
install.packages("class")
shiny::runApp()
runApp()
runApp()
runApp()
getwd()
setwd("/Users/hongfan/Desktop/Portfolio/DataProducts_Coursera/")
getwd()
runApp("IrisIdentification")
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
test = c(1,2,3,4)
knn(iris, test, k = input$box5, prob = FALSE)
knn(iris, test, k = input$box5, prob = FALSE, cl = 0)
?cbind
factor(c(rep("s",25), rep("c",25), rep("v",25)))
iris[,5]
runApp('IrisIdentification')
test = cbind(1,2,3,4)
test
runApp('IrisIdentification')
test
knn(iris, cl = iris[,5], test, k = 1, prob = FALSE)
?knn
runApp('IrisIdentification')
knn(iris[, c(1:4)], cl = iris[,5], test, k = 1, prob = FALSE)
runApp('IrisIdentification')
class(iris)
class(iris$Sepal.Length)
class(iris$Species)
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
?textInput
summary(iris)
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
test
knn(iris[,c(1:4)], cl = iris[,5], test, k = 1, prob = FALSE)
knn(iris[,c(1:4)], cl = iris[,5], test, k = 5, prob = FALSE)
knn(iris[,c(1:4)], cl = iris[,5], test, k = 7, prob = FALSE)
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
?knn
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
?iris
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
runApp('IrisIdentification')
library(devtools)
install.packages("devtools")
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("slidifyDemo")
summary(iris)
class(summary(iris))
mutate(summary(iris))
?mutate
fruits
Fruits
require(googleVis)
require(googleVis)
Fruits
?requier
?require
names(iris)
require(plotly)
M1 = plot_ly(iris, x = iris$Sepal.Length, y = iris$Sepal.Width, mode = "markers", color = as.factor(iris$Species))
print(M1, tag = 'chart')
?plot_ly
M1 = plot_ly(iris, x = iris$Sepal.Length, y = iris$Sepal.Width, mode = "markers", color = as.factor(iris$Species))
M1
print(M1)
M1 = plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~Species)
M1
?plot_ly
print(M1)
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~Species)
M1
print(M1, tag = "chart")
?gvisMotionChart
gvisMotionChart(iris, xvar = "Sepal.Length", yvar = "Sepal.Width", colorvar = "Species")
gvisLineChart
?gvisLineChart
packageVersion('plotly')
# Chunk 1
summary(iris)
# Chunk 1
summary(iris)
install.packages("webshot"")
install.packages("webshot")
install.packages("webshot")
library(webshot)
```{r echo=F, message=FALSE}
library(plotly)
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~as.factor(Species))
M1
```
library(plotly)
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~as.factor(Species))
M1
```{r echo=F, message=FALSE, warning=FALSE}
library(plotly)
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~as.factor(Species))
M1
```
# Chunk 1
summary(iris)
library(plotly)
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~as.factor(Species))
M1
library(plotly)
M1 = plot_ly(iris, x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~Species)
htmlwidgets::saveWidget(as.widget(M1), file = "demo.html")
library(plotly)
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~Species)
htmlwidgets::saveWidget(plotly(M1), file = "demo.html")
M1 = plot_ly(iris, type="scatter", x = ~Sepal.Length, y = ~Sepal.Width, mode = "markers", color = ~Species)
htmlwidgets::saveWidget(M1, file = "demo.html")
runApp('~/Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
names(iris)
runApp('~/Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
install.packages('rsconnect')
int findBaseDir(std::string* shinyServerPath);
rsconnect::setAccountInfo(name='hongfan',
token='20DFB18D93B378EDFCF65BDBB280DD09',
secret='im9mTRcFa7oMlKCQPgCVbsdjt/fih1ozPgOzutxR')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
install.packages(c('ggplot2', 'shiny'))
install.packages(c("ggplot2", "shiny"))
getwd()
runApp('~/Desktop/Portfolio/DataProducts_Coursera/IrisIdentification')
setwd("/Users/hongfan/Desktop/Portfolio/DataProducts_Coursera/IrisIdentification")
library(rsconnect)
deployApp()
?publish
publish("rainbowfan", "/DataProductsDeveloping/ShinyApp/slidifyShinyApp")
library(slidify)
author("DataProductsDeveloping/ShinyApp/slidifyShinyApp")
publish('rainbowfan', 'slidifyDemo')
library(slidify)
publish('rainbowfan', 'slidifyDemo')
publish('rainbowfan', 'slidifyDemo')
publish("DataProductsDeveloping/ShinyApp/slidifyDemo", "rainbowfan")
getwd()
setwd("/Users/hongfan/Desktop/Portfolio/DataProducts_Coursera/")
publish("slidifyDemo", "rainbowfan")
publish("rainbowfan", "slidifyDemo")
getwd()
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
getwd()
setwd("/Users/hongfan/Desktop/Portfolio/DataProducts_Coursera/")
getwd()
setwd("/Users/hongfan/Desktop/Portfolio/DataProducts_Coursera/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
setwd("/Users/hongfan/Desktop/Portfolio/DataProducts_Coursera/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("rainbowfan", "DataProductsDeveloping/ShinyApp/slidifyDemo")
publish("DataProductsDeveloping/ShinyApp/slidifyDemo", "rainbowfan")
publish("rainbowfan", "DataProductsDeveloping")
publish("rainbowfan", "DataProductsDeveloping")
publish("rainbowfan", "slidifyDemo")
getwd()
